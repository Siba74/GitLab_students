
git config --global user.name "My Name"  - добавление пользователя и адреса электронной почты
git config --global user.email siba740@mail.ru  
приставка --global делает настройки длобальными

git config –list - настройки системы
git --help - список команд
git init - создания репозитория
git add 'name_file' 'name_file_2" ...   etc  - добавление файла в репозиторий
git commit — записать изменения в репозиторий
git commit -m "Commit" - добавления комментария
git commit --amend — добавить изменения к последнему коммиту
git branch имя_ветки - создание ветки
git branch - переключение на ветку
git branch -m <oldname> <newname> - чтобы переименовать ветку
git checkout –b - создаст и переключить на созданную ветку

git add '*.txt' - добавить только файлы, соответствующие указанному
выражению
git add --patch filename — позволяет выбрать какие изменения из файла
добавятся в коммит
git reset [file] — убрать файлы из индекса коммита (изменения не теряются)
git diff --staged — показать, что было добавленно в индекс с помощью git
add, но еще не было закоммиченно
git rm - удалит файл из репозитория
git rm --cached имя_файла - чтобы файл перестал отслеживатся, но остался на диске
git rm [file] — удалить файл из рабочей директории и добавить в индекс
информацию об удалении
git mv [file-original] [file-renamed] — изменить имя файла и добавить в
индекс коммита
git status - проверка текущего состояние репозитория
git status -s - покажет изменения более кратко

https://gist.github.com/dev-pwa/2936e3b9c9afa669be0ab812ad148f85 - горячие клавиши

git remote add origin "Ссылка на репозиторий" - добавляет информацию о связи между удаленным
репозиторием с псевдонимом origin с локальным
git branch -M main - переименовывает ветку master на локальном репозитории в main
git push -u origin main - позволяет запушить (отправить) локальный репозиторий на
сервер.

git log - история коммитов
git log -p - подробная история коммитов
git log --oneline - читабельный вид логов коммита
git log --author=“user_name” - сообщение конкретного автора
git log --graph - история логов в виде флагов
git log --graph --oneline --decorate - отражающий структуру
ветвления истории коммитов
git log --all --graph --oneline --decorate - Для просмотра истории коммитов по всем веткам используется флаг --all
git log –n количество - заданное количество записей
git log --since=1.month.ago --until=1.weeks.ago - поиск по дате логов
git diff HEAD - показать, что изменилось с последнего коммита
git diff HEAD^ — показать, что изменилось с предпоследнего коммита.
git diff [branch] — сравнить текущую ветку с заданной.
git diff --stat — показать статистику какие файлы были изменены и как.
git log --follow [file] — список изменения текущего файла, включая
переименования
Опция --pretty меняет формат вывода:
git log --pretty=oneline — выводит каждый коммит в одну строку
git log --pretty=format:"%h %s" --graph — изменение вида отображения
истории изменений
git log --author='Name' --after={1.week.ago} --pretty=oneline --abbrev-commit
— посмотреть над чем работал заданный пользователь последнюю неделю
git log --no-merges master.. — посмотреть историю изменений только для
текущей ветки
git show [commit] — показать метадату и изменения в заданном коммите
git show [branch]:[file] — посмотреть на файл в другой ветке, не
переключаясь на неё
git log --stat — показывает сокращённую статистику для коммитов,
например изменённые файлы и количество добавленных/удалённых строк в
каждом их них
git log -S имя_функции — позволяет посмотреть добавление/удаление
функции

git clone [url] клонирование репозитория
git clone --mirror [url] - клонирование репозитория без возможности редактировать


git clone [url] --sparse